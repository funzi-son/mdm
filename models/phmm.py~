"""
Hidden Markov Model
Son N. Tran
"""

import numpy as np
import math

EPSILON = 0.0000000001

class HMM_DIS(object):
    def __init__(self,hsize,xsize):
        self.xsize = xsize
        self.hsize = hsize
        self.tweights = np.zeros((hsize,hsize),dtype=np.float)
        self.eweights = np.zeros((hsize,xsize),dtype=np.float)
        self.is_normalised = False

    def set_prior(self,prior):
        self.prior = prior;
        
    def add_transition_obs(self,j_,j):
        self.tweights[j_,j] += 1
    def add_emission_obs(self,j,i):
        self.eweights[j,i] += 1
        
    def viterbi(self):
        if !self.is_normalised:
            self.prior = self.prior/np.sum(self.prior,axis=0)
            self.tweights = self.tweights/np.sum(self.tweights,axis=1)[:,np.newaxis]
            self.eweights = self.eweights/np.sum(self.eweights,axis=1)[:,np.newaxis]
            self.is_normalised = True
        # Doing viterbi
        slen = len(X)
        path = np.zeros((slen-1,self.hsize),dtype=np.int)
        #mu_0 = p(o1|a1,a2)p(a1)p(a2)
        mu  =  np.multiply(self.eweights[:,X[0]],prior)
        for t in range(1,slen):
            mu = self.trans*mu
            mx_inds = np.argmax(mu,axis=0)
            mu = np.transpose(np.amax(mu,axis=0))
            mu = np.multiply(mu,self.eweights[:,X[t]]) 
            path[t-1,:] = mx_inds
            
        # Extract
        max_inx = np.argmax(mu)
        Y = [max_inx]
        for t in range(slen-2,-1,-1):
            max_inx = path[t,max_inx]
            Y.append(max_inx)

        return Y
    
class PHMM_DIS(object):
    ## Parallel HMM with observation as a single discrete variable
    def __init__(self,dataset):
        self.dataset = dataset
        self.hsize = dataset.total_activities()
        self.xsize = dataset.total_sensor_values()
        self.hmms = [HMM_DIS(self.hsize,self.xsize), HMM_DIS(self.hsize,self.xsize)]
        
    def estimate_params(self):
        
        while True:
            trans,emits = self.dataset.next()
            # Update transaction probability table
            # tweights[j',j] = p^k(j|j')
            if trans is not None:
                for k in range(2):
                    self.hmms[k].add_transition_obs(trans[0][k],trans[1][k])
            # Update emission probability table
            if emits is not None:
                #self.eweights[emits[1],emits[2],emits[0]] +=1
                self.hmms[0].add_emission_obs(emits[1],emits[0]) +=1
                self.hmms[1].add_emission_obs(emits[2],emits[0]) +=1
                
            if trans == None and emits == None:
                break
        #priors: act_num x num_residents
        priors = self.dataset.get_prior()
        self.hmms[0].set_prior(priors[:,0])
        self.hmms[1].set_prior(priors[:,1])

            
    def viterbi(self,X):
        # Viterbi algorithm
        # Input:  X - a sequence of events
        # Output: Y - len x 2: activities of residents
        Y = zip(self.hmms[0].viterbi(X),self.hmms[1].viterbi(X))
        return Y

    def run(self):
        self.estimate_params()
        valid_acc = 0
        valid_x,valid_y = self.dataset.valid_sequences()
        pred = self.viterbi(valid_x)
        print(len(valid_x))
        valid_acc = pred_accuracy(pred,valid_y)        
        return valid_acc
        

class HMM_VEC(object):

    def __init__(self):
        print("TODO")
        
class PHMM_VEC(object):

    def __init__(self):
        print("TODO")
