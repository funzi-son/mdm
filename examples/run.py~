"""
Test hmms on casas & aras datasets 
Son N. Tran, CSIRO
email: sontn.fz@gmail.com
===========================================================
"""

from data.casas_adlmr_ import *
from data.aras_ import *
from models.hmms import HMM
from models.mixhmm import MixHMM
from models.mdm import MDM

from models.utils import save_result
import numpy as np
import os
import sys

HOME = os.path.expanduser("~")
EXP_DIR = HOME + "/WORK/experiments/multiresidential/model_select/"

data  = {0: CASAS_ADLMR,
         1: ARAS_HouseA,
         2: ARAS_HouseB,
}

path = {0:HOME+"/WORK/Data/CASAS/adlmr/",
        1:HOME+"/WORK/Data/ARAS/",
        2:HOME+"/WORK/Data/ARAS/",
}

fold_num={0:26,
          1:30,
          2:30,
}

models = ["hmm","xhmm","phmm","chmm","fhmm","cd-fhmm","mdm"]
states = ["dis","vec1","vec2","vec3"]

DATA_ID  = 0
MODEL_ID = 0
STATE_ID = 0

LEAVE_ONE_OUT = False

def main():
    model_name = sys.argv[1]
    data_name  = sys.argv[2]
    state      = sys.argv[3]

    if state not in states:
        print("State is not found")
        helpf()
        return
    if model_name not in models:
        print("Model is not found")
        helpf()
        return
    if data_name not in data:
        print("Data is not found")
        helpf()
        return

    data_args = ["casas","arasa","arasb"]
    state_id = states.index(state)
    print(state_id)
    data_id = data_args.index(data_name)
    model_id = models.index(model_names)
    
    if state_id==3 and (data_id==1 or data_id==2):
        raise ValueError("This type of feature cannot be applied to this model");
    run(model_id,state_id,data_id)

def run(model_id,state_id,data_id):
    DATA_PATH = path[data_id]
    result_dir = EXP_DIR + models[model_id] + "/" + states[state_id] + "/" + data[data_id].__name__
    
    if not os.path.isdir(result_dir):
        os.makedirs(result_dir)
        
    result_log = result_dir+'/log.csv'
    if os.path.isfile(result_log):
        return
        
    FOLD_NUM = fold_num[data_id]        
    acc = []
    for fold in range(FOLD_NUM):
        dataset = data[data_id](DATA_PATH,fold+1)
        dataset.evaluation_type = 1    
        hmm = HMM(dataset,model_type=models[model_id],state_type=states[state_id])
        
        vld_,pred,labs = hmm.run()
        # Save fold result
        save_result(pred,labs,result_dir+'/fold'+str(fold))
        acc.append(vld_)

    acc = np.array(acc)
    acc = np.append(acc,[np.mean(acc,axis=0)],axis=0)
    
    print(rs)
if __name__=="__main__":
    main()
